name: Build Windows Release
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  create:
    tags:
      - 'v*'
jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.6.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qt5compat qtmultimedia'
        cache: true

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        nmake

    - name: Deploy Qt dependencies
      run: |
        cd build
        windeployqt.exe SQL_LOGIN.exe --release --no-translations

    - name: Download MySQL plugin
      shell: pwsh
      run: |
        Write-Host "Downloading MySQL plugin for Qt 6.10.0 MSVC2022..."
        $pluginUrl = "https://github.com/thecodemonkey86/qt_mysql_driver/releases/download/qmysql_6.10.0/qsqlmysql.dll_Qt_SQL_driver_6.10.0_MSVC2022_64-bit.zip"
        Invoke-WebRequest -Uri $pluginUrl -OutFile mysql_plugin.zip

        Write-Host "Extracting plugin..."
        Expand-Archive mysql_plugin.zip -DestinationPath mysql_temp -Force

        Write-Host "Creating sqldrivers directory..."
        New-Item -ItemType Directory -Force -Path "build/sqldrivers"

        Write-Host "Copying qsqlmysql.dll..."
        $dllPath = Get-ChildItem -Path mysql_temp -Filter "qsqlmysql.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($dllPath) {
          Copy-Item $dllPath.FullName -Destination "build/sqldrivers/qsqlmysql.dll"
          Write-Host "SUCCESS: qsqlmysql.dll copied to build/sqldrivers/"
        } else {
          Write-Host "WARNING: qsqlmysql.dll not found, trying root..."
          if (Test-Path "mysql_temp/qsqlmysql.dll") {
            Copy-Item "mysql_temp/qsqlmysql.dll" -Destination "build/sqldrivers/"
            Write-Host "SUCCESS: Copied from root"
          }
        }

        Write-Host "`nDownloading MySQL Connector C (for libmysql.dll)..."
        $mysqlConnectorUrl = "https://downloads.mysql.com/archives/get/p/19/file/mysql-connector-c-6.1.11-winx64.zip"
        Invoke-WebRequest -Uri $mysqlConnectorUrl -OutFile mysql_connector.zip

        Write-Host "Extracting MySQL Connector..."
        Expand-Archive mysql_connector.zip -DestinationPath mysql_connector_temp -Force

        Write-Host "Searching for libmysql.dll..."
        $libmysqlPath = Get-ChildItem -Path mysql_connector_temp -Filter "libmysql.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($libmysqlPath) {
          Copy-Item $libmysqlPath.FullName -Destination "build/libmysql.dll"
          Write-Host "SUCCESS: libmysql.dll copied to build/"
        } else {
          Write-Host "ERROR: libmysql.dll not found in MySQL Connector"
          Write-Host "Listing contents:"
          Get-ChildItem mysql_connector_temp -Recurse -Filter "*.dll" | Select-Object FullName
        }

        Write-Host "`nMySQL setup completed"

    - name: Verify MySQL plugin
      shell: pwsh
      run: |
        Write-Host "`n=== Verification ==="
        Write-Host "Contents of build/:"
        Get-ChildItem "build" -Filter "*.dll" | Format-Table Name, Length

        Write-Host "`nContents of build/sqldrivers/:"
        if (Test-Path "build/sqldrivers") {
          Get-ChildItem "build/sqldrivers" -Recurse | Format-Table Name, Length
        } else {
          Write-Host "ERROR: sqldrivers directory not found!"
        }

        if (Test-Path "build/sqldrivers/qsqlmysql.dll") {
          Write-Host "`nSUCCESS: qsqlmysql.dll is present"
        } else {
          Write-Host "`nERROR: qsqlmysql.dll NOT FOUND!"
          exit 1
        }

        if (Test-Path "build/libmysql.dll") {
          Write-Host "SUCCESS: libmysql.dll is present"
        } else {
          Write-Host "WARNING: libmysql.dll NOT FOUND (may cause issues)"
        }

    - name: Create README
      shell: pwsh
      run: |
        $content = "Sistema de Ventas - Windows Portable`n"
        $content += "======================================`n`n"
        $content += "REQUISITOS:`n"
        $content += "- Windows 10 o superior (64-bit)`n"
        $content += "- Conexion a Internet`n`n"
        $content += "INSTRUCCIONES:`n"
        $content += "1. Extraer el ZIP completo`n"
        $content += "2. Ejecutar SQL_LOGIN.exe o Ejecutar.bat`n"
        $content += "3. Ingresar credenciales`n`n"
        $content += "NOTA: No requiere instalacion ni permisos de administrador.`n"
        $content += "Todas las dependencias estan incluidas.`n"
        $content | Out-File -FilePath "build/README.txt" -Encoding UTF8

    - name: Create launcher
      shell: pwsh
      run: |
        $batch = "@echo off`r`n"
        $batch += "title Sistema de Ventas`r`n"
        $batch += "cls`r`n"
        $batch += "echo ========================================`r`n"
        $batch += "echo   Sistema de Ventas`r`n"
        $batch += "echo ========================================`r`n"
        $batch += "echo.`r`n"
        $batch += "echo Iniciando aplicacion...`r`n"
        $batch += "echo.`r`n"
        $batch += "SQL_LOGIN.exe`r`n"
        $batch += "if errorlevel 1 (`r`n"
        $batch += "  echo.`r`n"
        $batch += "  echo ERROR: No se pudo iniciar.`r`n"
        $batch += "  echo Verifique que todas las DLLs esten presentes.`r`n"
        $batch += "  echo.`r`n"
        $batch += "  pause`r`n"
        $batch += ")`r`n"
        $batch | Out-File -FilePath "build/Ejecutar.bat" -Encoding ASCII -NoNewline

    - name: Package portable version
      shell: pwsh
      run: |
        cd build
        Write-Host "Packaging files..."
        $exclude = @('*.cpp', '*.h', '*.obj', 'CMakeFiles', '*.cmake', 'Makefile', 'mysql_temp', 'mysql_connector_temp')
        Get-ChildItem | Where-Object { $_.Name -notin $exclude -and $_.Name -notlike 'CMake*' } | Compress-Archive -DestinationPath ../SistemaVentas-Windows-Portable.zip -Force
        Write-Host "Package created successfully"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: SistemaVentas-Windows
        path: SistemaVentas-Windows-Portable.zip
        retention-days: 90
